#### Case 1: let's check species for which the names are unmatched ####
#unmatched_species_acceptedname = tnrs(sort(unmatched_species_list))
TPL_res = TPL(sort(unmatched_species_list))
TPL_res$New_Taxon = paste(TPL_res$New.Genus, TPL_res$New.Species, sep = ' ')
# Species still unmatched
non_matched_species = TPL_res[!(TPL_res$New_Taxon %in% TryAccSpecies$AccSpeciesName),]
#     - Alisma plantago-aquatica: match with Alisma plantago-aquatica subsp. orientale
TPL_res[TPL_res$Taxon == "Alisma plantago-aquatica",]$New_Taxon = 'Alisma plantago-aquatica subsp. orientale'
#     - Capsella bursa-pastoris: species not in TRY
#     - Impatiens noli-tangere: species not in TRY
#     - Lysimachia arvensis: according to TPL, "probably a synonym of Anagallis arvensis L"
TPL_res[TPL_res$Taxon == "Lysimachia arvensis",]$New_Taxon = 'Anagallis arvensis'
#     - Ribes uva-crispa: species not in TRY
#     - Senecio erucifolius: probably synonym Jacobaea erucifolia according to TPL
TPL_res[TPL_res$Taxon == "Senecio erucifolius",]$New_Taxon = 'Jacobaea erucifolia'
#     - Valerianella officinalis: does not exist ???
#     - Viola sylvatica: unresolved
## Species matched: replace in Species_list_main
newly_matched_species = TPL_res[(TPL_res$New_Taxon %in% TryAccSpecies$AccSpeciesName),]
Species_list_main[Species_list_main %in% newly_matched_species$submittedname] = newly_matched_species$New_Taxon
library(Taxonstand)
install.packages("taxonstand")
install.packages("Taxonstand")
library(Taxonstand)
### These are all the different dataset ...
BEFUp_list <- read_excel("~/Desktop/Research/Senckenberg/Trait_database/Plants/Species_lists/SP_LIST_EP_BEFUp.xlsx")
Forest_veg_list <- read_delim("~/Desktop/Research/Senckenberg/Trait_database/Plants/Species_lists/25886_Vegetation Records for 151 Forest EPs, 2009 - 2018_1.5.4/25886.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
Forest_stand_list <- read_delim("~/Desktop/Research/Senckenberg/Trait_database/Plants/Species_lists/18269_Stand composition, abundance on all forest EPs, 2008 – 2014_1.5.14/18269.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
Grassland_list <- read_delim("~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Data/Raw_data/Pour Margot/190411_EP_species_info_GRL_140519.txt",
";", escape_double = FALSE, trim_ws = TRUE)
# ...  which I combine into one species list
Species_list = unique(c(BEFUp_list$SPECIES, Forest_veg_list$Species, Forest_stand_list$Species, Grassland_list[Grassland_list$Group_broad == 'Plant',]$Species ))
Species_list_main = gsub('_', ' ', Species_list)
### This is the list of TRY species
TryAccSpecies <- read_delim("~/Desktop/Research/Senckenberg/Trait_database/Plants/Species_lists/TryAccSpecies.txt", '\t')
### Try to match both lists. For this:
#      - Consider that aggregate species can be attributed the main species' traits
Species_list_main = gsub(" aggr.", "", Species_list_main)
Species_list_main = gsub(" agg\\.", "", Species_list_main)
Species_list_main = gsub(" agg", "", Species_list_main)
#      - Species with uncertain ID, but resembling a species (cf.) can be attributed this species' traits
Species_list_main = gsub(" cf ", " ", Species_list_main)
#      - Homogenise "sp" and "spec"
Species_list_main = gsub(" spec", " sp", Species_list_main)
Species_list_main = gsub(" sp\\.", " sp", Species_list_main)
#      - Correct some species names
Species_list_main = gsub('Bromus hordeaceus.incl B commutatus.', 'Bromus hordeaceus', Species_list_main)
Species_list_main = gsub('Neottia nidus avis', 'Neottia nidus-avis', Species_list_main)
Species_list_main = gsub('Impatiens noli tangere', 'Impatiens noli-tangere', Species_list_main)
# Remove unidentified species from the list
unidentifiable_species = c("unknown deciduous", "Tree seedling", "Lamiaceae sp", "Asteraceae sp")
Species_list_main = Species_list_main[!(Species_list_main %in% unidentifiable_species)]
# This possibly created some duplicates
Species_list_main = sort(unique(Species_list_main))
### Intersect between both lists?
intersect(Species_list_main, TryAccSpecies$AccSpeciesName)
species_not_in_try = Species_list_main[!(Species_list_main %in% TryAccSpecies$AccSpeciesName)]   # Around species not found in TRY
# 2 cases: either 1. id only to genus level, or 2. species does not match
# Case 1: unmatched species
unmatched_species_list = species_not_in_try[!sapply(species_not_in_try, function(x){grepl(' sp', x, fixed = TRUE)})]
# Case 2: species at genus leve only
genus_only_list = species_not_in_try[sapply(species_not_in_try, function(x){grepl(' sp$', x, fixed = FALSE)})]
#### Case 1: let's check species for which the names are unmatched ####
#unmatched_species_acceptedname = tnrs(sort(unmatched_species_list))
TPL_res = TPL(sort(unmatched_species_list))
TPL_res$New_Taxon = paste(TPL_res$New.Genus, TPL_res$New.Species, sep = ' ')
# Species still unmatched
non_matched_species = TPL_res[!(TPL_res$New_Taxon %in% TryAccSpecies$AccSpeciesName),]
#     - Alisma plantago-aquatica: match with Alisma plantago-aquatica subsp. orientale
TPL_res[TPL_res$Taxon == "Alisma plantago-aquatica",]$New_Taxon = 'Alisma plantago-aquatica subsp. orientale'
#     - Capsella bursa-pastoris: species not in TRY
#     - Impatiens noli-tangere: species not in TRY
#     - Lysimachia arvensis: according to TPL, "probably a synonym of Anagallis arvensis L"
TPL_res[TPL_res$Taxon == "Lysimachia arvensis",]$New_Taxon = 'Anagallis arvensis'
#     - Ribes uva-crispa: species not in TRY
#     - Senecio erucifolius: probably synonym Jacobaea erucifolia according to TPL
TPL_res[TPL_res$Taxon == "Senecio erucifolius",]$New_Taxon = 'Jacobaea erucifolia'
#     - Valerianella officinalis: does not exist ???
#     - Viola sylvatica: unresolved
## Species matched: replace in Species_list_main
newly_matched_species = TPL_res[(TPL_res$New_Taxon %in% TryAccSpecies$AccSpeciesName),]
Species_list_main[Species_list_main %in% newly_matched_species$submittedname] = newly_matched_species$New_Taxon
All_synonyms = tpl.get(Species_list_main, return.synonyms = T)
??suggest.name
tpl.get
suggest.name("Cofea arabyca")
library(tpl)
suggest.name("Cofea arabyca")
try_check = TPL(TryAccSpecies$AccSpeciesName)
All_synonyms = tpl.get(Species_list_main, return.synonyms = T)
All_synonyms
nrow(All_synonyms)
All_synonyms
str(All_synonyms)
All_synonyms$synonyms
All_synonyms$synonyms$name.synonym
all_synonyms = All_synonyms$synonyms$name.synonym
unique(all_synonyms)
length(unique(all_synonyms))
length(all_synonyms)
tpl.get("Myrcia lingua", return.synonyms = T)
tpldata
tpldata()
tpldata::tpl.synonyms
tpldata::tpl.synonyms[1]
all_synonyms
All_synonyms
All_synonyms$synonyms
all_synonyms = All_synonyms[All_synonyms$confidence.level == "H",]$synonyms
All_synonyms$synonyms[All_synonyms$synonyms$confidence.level == "H",]
all_synonyms = All_synonyms$synonyms[All_synonyms$synonyms$confidence.level == "H",]
nrow(all_synonyms)
all_synonyms_in_try = all_synonyms[all_synonyms %in% TryAccSpecies$AccSpeciesName]
all_synonyms_in_try
all_synonyms
all_synonyms = All_synonyms$synonyms[All_synonyms$synonyms$confidence.level == "H",]$name.synonym
all_synonyms_in_try = all_synonyms[all_synonyms %in% TryAccSpecies$AccSpeciesName]
all_synonyms_in_try
All_synonyms
all_synonyms = unique(c(All_synonyms$synonyms[All_synonyms$synonyms$confidence.level == "H",]$name.synonym, All_synonyms$synonyms$name.accepted, All_synonyms$synonyms$original.search))
all_synonyms
all_synonyms_in_try = all_synonyms[all_synonyms %in% TryAccSpecies$AccSpeciesName]
all_synonyms_in_try
Species_list_main
all_synonyms = unique(c(All_synonyms$synonyms[All_synonyms$synonyms$confidence.level == c("M", "H"),]$name.synonym, All_synonyms$synonyms$name.accepted, All_synonyms$synonyms$original.search))
all_synonyms_in_try = all_synonyms[all_synonyms %in% TryAccSpecies$AccSpeciesName]
all_synonyms_in_try
all_synonyms = unique(c(All_synonyms$synonyms[All_synonyms$synonyms$confidence.level %in% c("M", "H"),]$name.synonym, All_synonyms$synonyms$name.accepted, All_synonyms$synonyms$original.search))
all_synonyms_in_try = all_synonyms[all_synonyms %in% TryAccSpecies$AccSpeciesName]
all_synonyms_in_try
All_synonyms = tpl.get(Species_list_main, return.synonyms = T)
Species_list_main
all_synonyms = unique(c(All_synonyms$synonyms[All_synonyms$synonyms$confidence.level %in% c("M", "H"),]$name.synonym,
All_synonyms$synonyms$name.accepted,
All_synonyms$synonyms$original.search))
all_synonyms
unique(c(All_synonyms$synonyms[All_synonyms$synonyms$confidence.level %in% c("M", "H"),]$name.synonym,
All_synonyms$synonyms$name.accepted,
All_synonyms$synonyms$original.search))
all_synonyms_in_try
test = tpl.get("Potentilla anserina", return.synonyms = T)
test
test$synonyms$name.synonym %in% TryAccSpecies$AccSpeciesName
test$synonyms$name.synonym[test$synonyms$name.synonym %in% TryAccSpecies$AccSpeciesName]
"Potentilla anserina"  %in% TryAccSpecies$AccSpeciesName
BEFUp_list <- read_excel("~/Desktop/Research/Senckenberg/Trait_database/Plants/Species_lists/SP_LIST_EP_BEFUp.xlsx")
Forest_veg_list <- read_delim("~/Desktop/Research/Senckenberg/Trait_database/Plants/Species_lists/25886_Vegetation Records for 151 Forest EPs, 2009 - 2018_1.5.4/25886.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
Forest_stand_list <- read_delim("~/Desktop/Research/Senckenberg/Trait_database/Plants/Species_lists/18269_Stand composition, abundance on all forest EPs, 2008 – 2014_1.5.14/18269.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
Grassland_list <- read_delim("~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Data/Raw_data/Pour Margot/190411_EP_species_info_GRL_140519.txt",
";", escape_double = FALSE, trim_ws = TRUE)
# ...  which I combine into one species list
Species_list = unique(c(BEFUp_list$SPECIES, Forest_veg_list$Species, Forest_stand_list$Species, Grassland_list[Grassland_list$Group_broad == 'Plant',]$Species ))
Species_list_main = gsub('_', ' ', Species_list)
### This is the list of TRY species
TryAccSpecies <- read_delim("~/Desktop/Research/Senckenberg/Trait_database/Plants/Species_lists/TryAccSpecies.txt", '\t')
### Try to match both lists. For this:
#      - Consider that aggregate species can be attributed the main species' traits
Species_list_main = gsub(" aggr.", "", Species_list_main)
Species_list_main = gsub(" agg\\.", "", Species_list_main)
Species_list_main = gsub(" agg", "", Species_list_main)
#      - Species with uncertain ID, but resembling a species (cf.) can be attributed this species' traits
Species_list_main = gsub(" cf ", " ", Species_list_main)
#      - Homogenise "sp" and "spec"
Species_list_main = gsub(" spec", " sp", Species_list_main)
Species_list_main = gsub(" sp\\.", " sp", Species_list_main)
#      - Correct some species names
Species_list_main = gsub('Bromus hordeaceus.incl B commutatus.', 'Bromus hordeaceus', Species_list_main)
Species_list_main = gsub('Neottia nidus avis', 'Neottia nidus-avis', Species_list_main)
Species_list_main = gsub('Impatiens noli tangere', 'Impatiens noli-tangere', Species_list_main)
# Remove unidentified species from the list
unidentifiable_species = c("unknown deciduous", "Tree seedling", "Lamiaceae sp", "Asteraceae sp")
Species_list_main = Species_list_main[!(Species_list_main %in% unidentifiable_species)]
# This possibly created some duplicates
Species_list_main = sort(unique(Species_list_main))
### Intersect between both lists?
intersect(Species_list_main, TryAccSpecies$AccSpeciesName)
species_not_in_try = Species_list_main[!(Species_list_main %in% TryAccSpecies$AccSpeciesName)]   # Around species not found in TRY
# 2 cases: either 1. id only to genus level, or 2. species does not match
# Case 1: unmatched species
unmatched_species_list = species_not_in_try[!sapply(species_not_in_try, function(x){grepl(' sp', x, fixed = TRUE)})]
# Case 2: species at genus leve only
genus_only_list = species_not_in_try[sapply(species_not_in_try, function(x){grepl(' sp$', x, fixed = FALSE)})]
#### Case 1: let's check species for which the names are unmatched ####
#unmatched_species_acceptedname = tnrs(sort(unmatched_species_list))
TPL_res = TPL(sort(unmatched_species_list))
TPL_res$New_Taxon = paste(TPL_res$New.Genus, TPL_res$New.Species, sep = ' ')
# Species still unmatched
non_matched_species = TPL_res[!(TPL_res$New_Taxon %in% TryAccSpecies$AccSpeciesName),]
newly_matched_species = TPL_res[(TPL_res$New_Taxon %in% TryAccSpecies$AccSpeciesName),]
Species_list_main[Species_list_main %in% newly_matched_species$submittedname] = newly_matched_species$New_Taxon
test = tpl.get("Alisma plantago-aquatica", return.synonyms = T)
test$synonyms$name.synonym[test$synonyms$name.synonym %in% TryAccSpecies$AccSpeciesName]
test
test$synonyms[All_synonyms$synonyms$confidence.level %in% c("M", "H"),]$name.synonym[test$synonyms[All_synonyms$synonyms$confidence.level %in% c("M", "H"),]$name.synonym %in% TryAccSpecies$AccSpeciesName]
test = tpl.get("Alisma plantago-aquatica", return.synonyms = T)
test
test = tpl.get("Alisma plantago-aquatica", return.synonyms = T)$synonyms[test$synonyms$confidence.level %in% c("M", "H"),]]
test = tpl.get("Alisma plantago-aquatica", return.synonyms = T)$synonyms[test$synonyms$confidence.level %in% c("M", "H"),]
test
test
test$name.synonym %in% TryAccSpecies$AccSpeciesName]
test$name.synonym %in% TryAccSpecies$AccSpeciesName
test$name.synonym
tpl.get("Alisma plantago-aquatica", return.synonyms = T)$synonyms
"Alisma plantago-aquatica var. plantago-aquatica" %in% TryAccSpecies$AccSpeciesName
TryAccSpecies$AccSpeciesName
TryAccSpecies$AccSpeciesName[grepl("Alisma", 'TryAccSpecies$AccSpeciesName')]
grepl("Alisma", 'TryAccSpecies$AccSpeciesName')
grepl("Alisma", TryAccSpecies$AccSpeciesName)
TryAccSpecies$AccSpeciesName[grepl("Alisma", TryAccSpecies$AccSpeciesName)]
Alisma plantago-aquatica
test = tpl.get("Capsella bursa-pastoris", return.synonyms = T)$synonyms[test$synonyms$confidence.level %in% c("M", "H"),]
test
tpl.get("Capsella bursa-pastoris", return.synonyms = T)$synonyms
tpl.get("Capsella bursa-pastoris", return.synonyms = T)$synonyms[test$synonyms$confidence.level %in% c("M", "H"),]
test$synonyms$confidence.level
test = tpl.get("Capsella bursa-pastoris", return.synonyms = T)$synonyms
test = test[test$confidence.level %in% c("M", "H"),]
test
test$name.synonym %in% TryAccSpecies$AccSpeciesName
test[test$name.synonym %in% TryAccSpecies$AccSpeciesName,]
test = test[test$confidence.level %in% c("H"),]
test
test = tpl.get("Lysimachia arvensis", return.synonyms = T)$synonyms
test
test = tpl.get("Lysimachia arvensis", return.synonyms = T)$synonyms
test
tpl.get("Lysimachia arvensis", return.synonyms = T)
test = tpl.get("Senecio erucifolius", return.synonyms = T)$synonyms
test
test = test[test$confidence.level %in% c("H"),]
test[test$name.synonym %in% TryAccSpecies$AccSpeciesName,]
test
test = tpl.get("Senecio erucifolius", return.synonyms = T)$synonyms
test
All_synonyms
All_synonyms = tpl.get(Species_list_main, return.synonyms = T)$synonyms
All_synonyms
All_reduced = unique(All_synonyms[, c('id', 'name.accepted', 'original.search')])
All_reduced
nrow(All_reduced)
All_synonyms
head(All_synonyms)
initial_names = data.frame(id = All_reduced$id,
name.accepted = All_reduced$name.accepted,
original.search = All_reduced$original.search,
synonym.id = NA,
family= NA,
genus= NA,
species= NA,
source= NA,
source.id= NA,
name.synonym = All_reduced$original.search
)
all_reduced = unique(All_synonyms[, c('id', 'name.accepted', 'original.search')])
Initial_names = data.frame(id = All_reduced$id,
name.accepted = All_reduced$name.accepted,
original.search = All_reduced$original.search,
synonym.id = NA,
family= NA,
genus= NA,
species= NA,
source= NA,
source.id= NA,
name.synonym = All_reduced$original.search
)
All_synonyms = rbind(All_synonyms, Initial_names)
colnames(All_synonyms)
Initial_names = data.frame(id = All_reduced$id,
name.accepted = All_reduced$name.accepted,
original.search = All_reduced$original.search,
synonym.id = NA,
family= NA,
genus= NA,
species= NA,
source= NA,
source.id= NA,
"infraspecific.rank" =NA,     "infraspecific.epithet"   =NA,
"authorship"     =NA,         "taxonomic.status.in.tpl" =NA, "confidence.level"    =NA,
"source"         =NA,
name.synonym = All_reduced$original.search
)
All_synonyms = rbind(All_synonyms, Initial_names)
All_synonyms
Initial_names = data.frame(id = All_reduced$id,
name.accepted = All_reduced$name.accepted,
original.search = All_reduced$original.search,
name.synonym = All_reduced$original.search,
confidence.level = NA
)
All_synonyms = rbind(All_synonyms[, c('id', 'name.accepted','original.search', 'name.synonym', 'confidence.level')], Initial_names)
All_synonyms
All_synonyms = rbind(All_synonyms[All_synonyms$synonyms$confidence.level %in% c('M', "H"), c('id', 'name.accepted','original.search', 'name.synonym', 'confidence.level')], Initial_names)
All_synonyms
All_synonyms$name.accepted[!(All_synonyms$name.accepted %in% All_synonyms$name.synonym)]
Initial_names = unique(data.frame(id = All_reduced$id,
name.accepted = c(All_reduced$name.accepted,All_reduced$name.accepted),
original.search = c(All_reduced$original.search,All_reduced$name.accepted),
name.synonym = c(All_reduced$original.search,All_reduced$original.search),
confidence.level = NA
))
Initial_names
All_synonyms = tpl.get(Species_list_main, return.synonyms = T)$synonyms
all_reduced = unique(All_synonyms[, c('id', 'name.accepted', 'original.search')])
Initial_names = unique(data.frame(id = All_reduced$id,
name.accepted = c(All_reduced$name.accepted,All_reduced$name.accepted),
original.search = c(All_reduced$original.search,All_reduced$name.accepted),
name.synonym = c(All_reduced$original.search,All_reduced$original.search),
confidence.level = NA
))
All_synonyms = rbind(All_synonyms[All_synonyms$synonyms$confidence.level %in% c('M', "H"), c('id', 'name.accepted','original.search', 'name.synonym', 'confidence.level')], Initial_names)
All_synonyms = rbind(All_synonyms[All_synonyms$synonyms$confidence.level %in% c('M', "H"), c('id', 'name.accepted','original.search', 'name.synonym', 'confidence.level')], Initial_names)
All_synonyms$name.accepted[!(All_synonyms$name.accepted %in% All_synonyms$name.synonym)]
All_synonyms
All_synonyms
All_synonyms = tpl.get(Species_list_main, return.synonyms = T)$synonyms
all_reduced = unique(All_synonyms[, c('id', 'name.accepted', 'original.search')])
Initial_names = unique(data.frame(id = All_reduced$id,
name.accepted = c(All_reduced$name.accepted,All_reduced$name.accepted),
original.search = c(All_reduced$original.search,All_reduced$name.accepted),
name.synonym = c(All_reduced$original.search,All_reduced$original.search),
confidence.level = NA
))
All_synonyms = rbind(All_synonyms[All_synonyms$synonyms$confidence.level %in% c('M', "H"), c('id', 'name.accepted','original.search', 'name.synonym', 'confidence.level')], Initial_names)
All_synonyms$name.accepted[!(All_synonyms$name.accepted %in% All_synonyms$name.synonym)]
All_synonyms
All_synonyms$name.accepted
All_synonyms$name.accepted
All_synonyms$name.synonym
All_synonyms
All_synonyms = tpl.get(Species_list_main, return.synonyms = T)$synonyms
all_reduced = unique(All_synonyms[, c('id', 'name.accepted', 'original.search')])
All_synonyms
all_reduced
Initial_names = unique(data.frame(id = All_reduced$id,
name.accepted = c(All_reduced$name.accepted,All_reduced$name.accepted),
original.search = c(All_reduced$original.search,All_reduced$name.accepted),
name.synonym = c(All_reduced$original.search,All_reduced$original.search),
confidence.level = NA
))
Initial_names
Initial_names = unique(data.frame(id = c(All_reduced$id, All_reduced$id),
name.accepted = c(All_reduced$name.accepted, All_reduced$name.accepted),
original.search = c(All_reduced$original.search, All_reduced$name.accepted),
name.synonym = c(All_reduced$original.search, All_reduced$original.search),
confidence.level = NA
))
Initial_names
All_synonyms = tpl.get(Species_list_main, return.synonyms = T)$synonyms
all_reduced = unique(All_synonyms[, c('id', 'name.accepted', 'original.search')])
all_reduced
All_reduced = unique(All_synonyms[, c('id', 'name.accepted', 'original.search')])
Initial_names = unique(data.frame(id = c(All_reduced$id, All_reduced$id),
name.accepted = c(All_reduced$name.accepted, All_reduced$name.accepted),
original.search = c(All_reduced$original.search, All_reduced$name.accepted),
name.synonym = c(All_reduced$original.search, All_reduced$original.search),
confidence.level = NA
))
Initial_names
All_synonyms = tpl.get(Species_list_main, return.synonyms = T)$synonyms
All_reduced = unique(All_synonyms[, c('id', 'name.accepted', 'original.search')])
Initial_names = unique(data.frame(id = c(All_reduced$id, All_reduced$id),
name.accepted = c(All_reduced$name.accepted, All_reduced$name.accepted),
original.search = c(All_reduced$original.search, All_reduced$name.accepted),
name.synonym = c(All_reduced$original.search, All_reduced$original.search),
confidence.level = NA
))
Initial_names
All_reduced
c(All_reduced$id, All_reduced$id)
c(All_reduced$name.accepted, All_reduced$name.accepted)
c(All_reduced$original.search, All_reduced$name.accepted)
c(All_reduced$original.search, All_reduced$original.search)
All_reduced
All_reduced$original.search
Initial_names = unique(data.frame(id = c(All_reduced$id, All_reduced$id),
name.accepted = c(All_reduced$name.accepted, All_reduced$name.accepted),
original.search = c(All_reduced$original.search, All_reduced$name.accepted),
name.synonym = c(as.character(All_reduced$original.search), as.character(All_reduced$original.search)),
confidence.level = NA
))
Initial_names
Initial_names = unique(data.frame(id = c(All_reduced$id, All_reduced$id),
name.accepted = c(All_reduced$name.accepted, All_reduced$name.accepted),
original.search = c(as.character(All_reduced$original.search), as.character(All_reduced$name.accepted)),
name.synonym = c(as.character(All_reduced$original.search), as.character(All_reduced$original.search)),
confidence.level = NA
))
Initial_names
All_synonyms = rbind(All_synonyms[All_synonyms$synonyms$confidence.level %in% c('M', "H"), c('id', 'name.accepted','original.search', 'name.synonym', 'confidence.level')], Initial_names)
All_synonyms
All_synonyms[All_synonyms$name.synonym %in% TryAccSpecies$AccSpeciesName,]$name.synonym
nrow(All_synonyms[All_synonyms$name.synonym %in% TryAccSpecies$AccSpeciesName,]$name.synonym
)
length(All_synonyms[All_synonyms$name.synonym %in% TryAccSpecies$AccSpeciesName,]$name.synonym
)
Species_list_main[Species_list_main %in% All_synonyms$name.synonym]
Species_list_main[!(Species_list_main %in% All_synonyms$name.synonym)]
tpl.get("Viola canina", return.synonyms = T)$synonyms
tpl.get("Viola canina", return.synonyms = T)
All_synonyms[All_synonyms$name.synonym =="Viola canina", ]
All_synonyms = tpl.get(Species_list_main, return.synonyms = T)$synonyms
All_reduced = unique(All_synonyms[, c('id', 'name.accepted', 'original.search')])
All_reduced
All_reduced[All_reduced$original.search == "Viola canina",]
All_synonyms = tpl.get(Species_list_main, return.synonyms = T)$synonyms
All_synonyms
length(unique(All_synonyms$original.search))
test = tpl.get(Species_list_main, return.synonyms = T)
test$all.entries
x1 = rnorm(1, 300, 40)
x1
x1
x1 = rnorm(1000, 300, 40)
x1
x1 = rnorm(1000, 300, 40)
x2 = rnorm(1000, 2, 9)
x3 = rnorm(1000, -40, 40)
xx2 = scale(x2)
xx3 = scale(x3)
y = x1 + x1+ x2 + x3
yy = xx1 + xx1+ xx2 + xx3
xx1 = scale(x1)
xx2 = scale(x2)
xx3 = scale(x3)
yy = xx1 + xx1+ xx2 + xx3
lm(y~x1+x2+x3)
m = lm(y~x1+x2+x3)
m
summary(m)
y = x1 + x1+ x2 + x3 + rnorm(1000, 1, 1)
y = x1 + x1+ x2 + x3 + rnorm(1000, 1, 1)
yy = xx1 + xx1+ xx2 + xx3 + rnorm(1000, 1, 1)
m = lm(y~x1+x2+x3)
summary(m)
y = x1 + x1+ x2 + x3 + rnorm(1000, 10, 1)
yy = xx1 + xx1+ xx2 + xx3 + rnorm(1000, 10, 1)
m = lm(y~x1+x2+x3)
summary(m)
y = x1 + x1+ x2 + x3 + rnorm(1000, 100, 1)
y = x1 + x1+ x2 + x3 + rnorm(1000, 10, 10)
yy = xx1 + xx1+ xx2 + xx3 + rnorm(1000, 10, 10)
m = lm(y~x1+x2+x3)
summary(m)
y = x1 + x1+ x2 + x3 + rnorm(1000, 10, 50)
yy = xx1 + xx1+ xx2 + xx3 + rnorm(1000, 10, 50)
m = lm(y~x1+x2+x3)
summary(m)
mm = lm(yy~xx1+xx2+xx3)
summary(mm)
Anova(mm)
anova(mm)
5163 / (5163 + 4782 + 348)
summary(mm)
2.3465 / (2.3465 + 2.1898 + 0.5905)
varpart(mm)
library(vegan)
varpart(mm)
?varpart
varpart(yy, data.frame(xx1, xx2, xx3))
varpart(Y = yy, xx1, xx2, xx3)
yy = xx1 + xx1+ xx2 + xx3 + rnorm(1000, 10, 0)
varpart(Y = yy, xx1, xx2, xx3)
shiny::runApp('Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
install.packages("ggplot2", dependencies=TRUE)
install.packages("ggplot2", dependencies=TRUE)
install.packages("ggplot2", dependencies = TRUE)
shiny::runApp('Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
version()
runApp('Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
install.packages("ggplot2", dependencies = TRUE)
runApp('Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
es_data_raw = data.frame(read_excel('es_data.xlsx'))
env_data = data.frame(read_excel('env_data.xlsx'))
setwd('/Users/Margot/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Data/Final_data')
library(readxl)
env_data = data.frame(read_excel('env_data.xlsx'))
setDT(es_data_raw)
colnames(env_data)[c(3, 4, 5,7:10, 22)]
shiny::runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/testapp.R')
runApp('~/Desktop/testapp.R')
runApp('~/Desktop/testapp.R')
runApp('~/Desktop/testapp.R')
runApp('~/Desktop/testapp.R')
runApp('~/Desktop/testapp.R')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
runApp('~/Desktop/Research/Senckenberg/Project_Landscape_MF/Landscape_composition/Code/ShinyApp')
ssession.info()
session.info()
sessionInfo()
